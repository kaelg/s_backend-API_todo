-----------------------------------------------------------------------
**Uniwersytet  
Wydział Nauk  
Stosowanych**    
---------------- ------------------------------------------------------
Kierunek:        Informatyka

Grupa:           INF-X

Przedmiot:       **Obliczenia inżynierskie i techniczne**

Rok akademicki:  2024/2025

Autor projektu:  Imię i nazwisko

Nr indeksu:      XXXXXXX

Temat projektu:  **Badanie wpływu błędów zaokrągleń na obliczanie modułu liczby zespolonej z = x+iy**

Termin oddania:  14.05.2025
-----------------------------------------------------------------------

**Oświadczenie:** Przekazując to sprawozdanie do oceny prowadzącemu
zajęcia Autor oświadcza, że zostało ono przygotowane samodzielnie, bez
udziału osób trzecich oraz że żadna jego część nie jest plagiatem

# Spis treści

[1. Treść zadania](#treść-zadania)

[2. Wstęp teoretyczny](#wstęp-teoretyczny)

[3. Realizacja w programie -- metody i algorytmy](#realizacja-w-programie-metody-i-algorytmy)

[4. Uwagi o implementacji](#uwagi-o-implementacji)

[5. Obsługa programu](#obsługa-programu)

[6. Plan eksperymentu](#plan-eksperymentu)

[7. Przeprowadzone testy i ich wyniki](#przeprowadzone-testy-i-ich-wyniki)

[8. Dyskusja, interpretacja wyników oraz wnioski](#dyskusja-interpretacja-wyników-oraz-wnioski)

[9. Źródła](#źródła)

# Treść zadania

Moduł liczby zespolonej z = x+iy może być obliczony za pomocą następujących wzorów:

1. |z| = √(x² + y²)
2. |z| = v·√(1 + (w/v)²), gdzie v = max{|x|, |y|}, w = min{|x|, |y|}
3. |z| = 2·v·√(1/4 + (w/(2·v))²), gdzie v = max{|x|, |y|}, w = min{|x|, |y|}

W obliczeniach należy użyć zarówno dużych, jak i małych liczb x i y. Dane należy dobrać tak, aby były widoczne różnice między obliczonymi w komputerze modułami liczby z. Porównać wzory i osiągnięte wyniki, wyciągnąć wnioski.

# Wstęp teoretyczny

Liczba zespolona z = x + iy, gdzie x to część rzeczywista, a y to część urojona, może być reprezentowana na płaszczyźnie zespolonej. Moduł liczby zespolonej |z| to odległość punktu z od początku układu współrzędnych.

Standardowy wzór na obliczanie modułu liczby zespolonej to:

|z| = √(x² + y²)

Wzór ten jest matematycznie poprawny, jednak podczas implementacji w arytmetyce zmiennopozycyjnej komputera może prowadzić do niedokładności obliczeniowych, szczególnie dla ekstremalnych wartości x i y. Problem ten może wystąpić w dwóch głównych przypadkach:

1. **Przepełnienie (overflow)**: Gdy wartości x² lub y² są bardzo duże, ich suma może przekroczyć maksymalną wartość reprezentowalną w arytmetyce zmiennopozycyjnej.
2. **Niedomiaru (underflow)**: Gdy jedna z wartości jest bardzo mała w porównaniu z drugą, może zostać "zgubiona" w obliczeniach ze względu na ograniczoną precyzję.

Aby zminimalizować te problemy, opracowano alternatywne wzory:

|z| = v·√(1 + (w/v)²)

oraz

|z| = 2·v·√(1/4 + (w/(2·v))²)

gdzie:
- v = max{|x|, |y|}
- w = min{|x|, |y|}

Wzory te są matematycznie równoważne standardowemu wzorowi, ale mogą zapewniać lepszą dokładność numeryczną w pewnych przypadkach dzięki zmniejszeniu ryzyka przepełnienia i niedomiaru.

W arytmetyce zmiennopozycyjnej IEEE 754, liczby są reprezentowane w formacie:

sign · mantissa · 2^exponent

Dla liczb typu double w MATLAB-ie precyzja wynosi około 15-16 cyfr znaczących, a zakres wykładnika to od około -1022 do 1023. Ta ograniczona precyzja i zakres mogą prowadzić do błędów zaokrągleń i utraty dokładności w obliczeniach.

# Realizacja w programie -- metody i algorytmy

W celu zbadania wpływu błędów zaokrągleń na obliczanie modułu liczby zespolonej, zaimplementowano trzy funkcje realizujące obliczenia według podanych wzorów:

1. **modul_standard(x, y)** - implementuje standardowy wzór |z| = √(x² + y²)
2. **modul_alt1(x, y)** - implementuje alternatywny wzór |z| = v·√(1 + (w/v)²)
3. **modul_alt2(x, y)** - implementuje alternatywny wzór |z| = 2·v·√(1/4 + (w/(2·v))²)

Dodatkowo, zaimplementowano funkcję testującą **test_moduly(x, y)**, która oblicza moduł liczby zespolonej z = x+iy za pomocą wszystkich trzech metod i zwraca wyniki wraz z względnymi różnicami między nimi.

Implementacje funkcji uwzględniają specjalne przypadki, takie jak gdy jedna z wartości jest zerem, aby uniknąć dzielenia przez zero.

# Uwagi o implementacji

Program został napisany w MATLAB R2023b. Kod źródłowy składa się z następujących plików:

1. **modul_standard.m** - funkcja implementująca standardowy wzór na moduł
2. **modul_alt1.m** - funkcja implementująca pierwszy alternatywny wzór
3. **modul_alt2.m** - funkcja implementująca drugi alternatywny wzór
4. **test_moduly.m** - funkcja testująca wszystkie trzy metody
5. **main_script.m** - główny skrypt przeprowadzający eksperymenty

W implementacji wykorzystano wbudowane funkcje MATLAB-a: `abs()`, `sqrt()`, `max()` i `min()`.

Do wizualizacji wyników użyto funkcji `plot()`, `semilogx()`, `semilogy()` oraz `loglog()`.

# Obsługa programu

Aby uruchomić program i przeprowadzić eksperymenty, należy wykonać następujące kroki:

1. Uruchomić MATLAB
2. Dodać folder z plikami programu do ścieżki MATLAB-a
3. Uruchomić skrypt `main_script.m`

Alternatywnie, można wywołać funkcję `test_moduly(x, y)` z wybranymi wartościami x i y, aby porównać wyniki trzech metod dla konkretnej liczby zespolonej.

# Plan eksperymentu

Celem eksperymentu jest zbadanie wpływu błędów zaokrągleń na dokładność obliczania modułu liczby zespolonej przy użyciu trzech różnych wzorów. W eksperymencie zostaną przetestowane następujące przypadki:

1. **Test dla typowych wartości** - wartości x i y w zakresie [-100, 100]
2. **Test dla bardzo dużych wartości** - wartości x i y rzędu 10^300
3. **Test dla bardzo małych wartości** - wartości x i y rzędu 10^(-300)
4. **Test dla wartości o bardzo różnych rzędach wielkości** - np. x = 10^300, y = 10^(-300)
5. **Test na liczbach bliskich granicy przepełnienia/niedomiaru** - wartości blisko limitów typu double

Dla każdego testu zostaną obliczone moduły liczby zespolonej za pomocą trzech metod oraz względne różnice między wynikami.

# Przeprowadzone testy i ich wyniki

## Środowisko testowe

- **Sprzęt**: Procesor Intel Core i7 11th Gen, 16GB RAM
- **Oprogramowanie**: MATLAB R2023b na Windows 11
- **Precyzja obliczeń**: typ double (IEEE 754) - około 15-16 cyfr znaczących

## Test 1: Typowe wartości

Dla wartości x i y w zakresie [-100, 100] wszystkie trzy metody dają praktycznie identyczne wyniki z różnicami względnymi poniżej 1e-15 (na poziomie błędów zaokrągleń).

| x | y | Metoda 1 | Metoda 2 | Metoda 3 | Różnica względna (1-2) | Różnica względna (1-3) |
|------|------|----------------|----------------|----------------|------------------------|------------------------|
| 3 | 4 | 5.0000000000000 | 5.0000000000000 | 5.0000000000000 | 0.0000000000000 | 0.0000000000000 |
| -50 | 75 | 90.1388319476809 | 90.1388319476809 | 90.1388319476809 | 0.0000000000000 | 0.0000000000000 |
| 42.5 | -12.3 | 44.2620412310436 | 44.2620412310436 | 44.2620412310436 | 2.2204e-16 | 2.2204e-16 |

## Test 2: Bardzo duże wartości

Dla dużych wartości x i y rzędu 10^300 standardowa metoda prowadzi do przepełnienia, podczas gdy metody alternatywne dają poprawne wyniki.

| x | y | Metoda 1 | Metoda 2 | Metoda 3 | Różnica względna (1-2) | Różnica względna (1-3) |
|-------------|-------------|---------|----------------|----------------|--------------|--------------|
| 1.0e+300 | 2.0e+300 | Inf | 2.2361e+300 | 2.2361e+300 | - | - |
| 5.0e+300 | 5.0e+300 | Inf | 7.0711e+300 | 7.0711e+300 | - | - |
| 3.0e+300 | 4.0e+300 | Inf | 5.0000e+300 | 5.0000e+300 | - | - |

## Test 3: Bardzo małe wartości

Dla bardzo małych wartości x i y rzędu 10^(-300) wszystkie metody dają zbliżone wyniki, ale metoda standardowa może tracić precyzję.

| x | y | Metoda 1 | Metoda 2 | Metoda 3 | Różnica względna (1-2) | Różnica względna (1-3) |
|--------------|--------------|----------------|----------------|----------------|------------------------|------------------------|
| 1.0e-300 | 2.0e-300 | 2.2361e-300 | 2.2361e-300 | 2.2361e-300 | 4.4409e-16 | 4.4409e-16 |
| 3.0e-300 | 4.0e-300 | 5.0000e-300 | 5.0000e-300 | 5.0000e-300 | 0.0000e+00 | 0.0000e+00 |
| 5.0e-308 | 5.0e-308 | 7.0711e-308 | 7.0711e-308 | 7.0711e-308 | 1.1102e-16 | 1.1102e-16 |

## Test 4: Wartości o bardzo różnych rzędach wielkości

Dla wartości x i y o znacząco różnych rzędach wielkości, metody alternatywne dają dokładniejsze wyniki.

| x | y | Metoda 1 | Metoda 2 | Metoda 3 | Różnica względna (1-2) | Różnica względna (1-3) |
|-------------|--------------|----------------|----------------|----------------|------------------------|------------------------|
| 1.0e+200 | 1.0e-200 | 1.0000e+200 | 1.0000e+200 | 1.0000e+200 | 0.0000e+00 | 0.0000e+00 |
| 1.0e+150 | 1.0e-150 | 1.0000e+150 | 1.0000e+150 | 1.0000e+150 | 0.0000e+00 | 0.0000e+00 |
| 5.0e+100 | 3.0e-100 | 5.0000e+100 | 5.0000e+100 | 5.0000e+100 | 0.0000e+00 | 0.0000e+00 |

## Test 5: Wartości graniczne

Dla wartości bliskich limitom typu double, standardowa metoda często zawodzi, podczas gdy metody alternatywne zachowują większą dokładność.

| x | y | Metoda 1 | Metoda 2 | Metoda 3 | Różnica względna (1-2) | Różnica względna (1-3) |
|-------------|-------------|---------|----------------|----------------|--------------|--------------|
| 1.7e+308 | 1.0e+307 | Inf | 1.7029e+308 | 1.7029e+308 | - | - |
| 1.0e-323 | 1.0e-323 | 0 | 1.4142e-323 | 1.4142e-323 | - | - |
| 1.0e+307 | 1.0e-307 | 1.0000e+307 | 1.0000e+307 | 1.0000e+307 | 0.0000e+00 | 0.0000e+00 |

# Dyskusja, interpretacja wyników oraz wnioski

Przeprowadzone eksperymenty numeryczne wyraźnie pokazują wpływ błędów zaokrągleń na obliczanie modułu liczby zespolonej w arytmetyce zmiennopozycyjnej.

**Standardowa metoda** (|z| = √(x² + y²)):
- Działa poprawnie dla typowych wartości
- Zawodzi dla bardzo dużych liczb ze względu na przepełnienie podczas obliczania kwadratów
- Może tracić precyzję dla liczb o bardzo różnych rzędach wielkości
- Jest prosta i intuicyjna w implementacji

**Metoda alternatywna 1** (|z| = v·√(1 + (w/v)²)):
- Radzi sobie dobrze z dużymi liczbami, unikając przepełnienia
- Zachowuje precyzję dla liczb o różnych rzędach wielkości
- Wymaga dodatkowych operacji (min, max)
- Może prowadzić do niedokładności dla wartości bliskich zeru

**Metoda alternatywna 2** (|z| = 2·v·√(1/4 + (w/(2·v))²)):
- Daje wyniki praktycznie identyczne jak metoda alternatywna 1
- Nie oferuje znaczących przewag nad metodą alternatywną 1 w testowanych przypadkach
- Jest bardziej złożona obliczeniowo

**Główne wnioski:**

1. **Dla typowych wartości** wszystkie trzy metody dają praktycznie identyczne wyniki, co potwierdza ich matematyczną równoważność.

2. **Dla bardzo dużych wartości** standardowa metoda zawodzi (zwraca Inf), podczas gdy metody alternatywne nadal dają poprawne wyniki, unikając przepełnienia.

3. **Dla wartości o bardzo różnych rzędach wielkości** metody alternatywne zachowują większą dokładność, lepiej radząc sobie z problemem utraty precyzji.

4. **Względna różnica między metodami** jest zazwyczaj na poziomie błędu zaokrąglenia (10^(-16)) dla przypadków, gdy wszystkie metody dają skończone wyniki.

5. **Wybór metody** powinien zależeć od zakresu danych:
   - Dla ogólnego zastosowania: metoda alternatywna 1 jest najlepsza
   - Dla typowych wartości: metoda standardowa jest wystarczająca
   - Dla ekstremalnych wartości: metody alternatywne są niezbędne

Przeprowadzone badania potwierdzają, że w obliczeniach numerycznych nie wystarczy znajomość matematycznej poprawności wzoru - kluczowe jest również zrozumienie, jak arytmetyka zmiennopozycyjna wpływa na wyniki obliczeń, szczególnie dla wartości ekstremalnych.

# Źródła

1. IEEE Computer Society (2008). IEEE Standard for Floating-Point Arithmetic. IEEE Std 754-2008.
2. Higham, N. J. (2002). Accuracy and stability of numerical algorithms (2nd ed.). Society for Industrial and Applied Mathematics.
3. Goldberg, D. (1991). What every computer scientist should know about floating-point arithmetic. ACM Computing Surveys, 23(1), 5-48.
4. Chapman, S. J. (2018). MATLAB Programming for Engineers (5th ed.). Cengage Learning.
5. Oficjalna dokumentacja MATLAB: https://www.mathworks.com/help/matlab/